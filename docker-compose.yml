version: "3.9"
services:
  wishlist-app:
    image: client
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8181:8181"
    depends_on:
      - wishlist-db
      - loki
    environment:
      - SERVER_PORT= 8181
      - SPRING_DATASOURCE_URL=jdbc:postgresql://wishlist-db/wishlist_db
      - JAVA_TOOL_OPTIONS="-javaagent:/app/opentelemetry-javaagent.jar"
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4718
    volumes:
      - ./build/libs:/app/build/libs

  wishlist-db:
    image: postgres:14.8-alpine3.18
    environment:
      POSTGRES_USER: "admin"
      POSTGRES_PASSWORD: "123qwe"
    volumes:
      - ./infrastructure/db/create_db.sql:/docker-entrypoint-initdb.d/create_db.sql
      - db-data:/var/lib/postgresql/data
    ports:
      - "15432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin -d wishlist_db" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G

  grafana:
    build: './config/grafana'
    ports:
      - 3000:3000/tcp
    volumes:
      - ./grafana:/var/lib/grafana
      # automatically configure the loki datasource
      - ./loki/grafana/provisioning/:/etc/grafana/provisioning/
      - ./grafana:/etc/grafana/provisioning
    environment:
#      - GF_SECURITY_ADMIN_USER=admin
#      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_BASIC_ENABLED=false
      - GF_FEATURE_TOGGLES_ENABLE=accessControlOnCall
      - GF_INSTALL_PLUGINS=https://storage.googleapis.com/integration-artifacts/grafana-lokiexplore-app/grafana-lokiexplore-app-latest.zip;grafana-lokiexplore-app
    networks:
      monitoring:
        aliases:
          - grafana
    depends_on:
      - loki

  prometheus:
    image: prom/prometheus
    ports:
      - 9090:9090
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus:/prometheus
    networks:
      monitoring:
        aliases:
          - prometheus

  #  иногда вместо loki используют promtail (это не точно)
  alloy:
    image: grafana/alloy:latest
    ports:
      - 12345:12345
    volumes:
      - ./alloy-config.alloy:/etc/alloy/config.alloy
      - ./logs:/tmp/app-logs/
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    depends_on:
      - wishlist-app
      - loki

  loki:
    image: grafana/loki:main
    ports:
      - "3100:3100"
    volumes:
      - ./loki-config.yaml:/etc/loki/local-config.yaml
    command: -config.file=/etc/loki/local-config.yaml


  # Jaeger
  jaeger-all-in-one:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14268"
      - "14250:14250"
    environment:
      - COLLECTOR_OTLP_ENABLED=true

  # Zipkin
  zipkin-all-in-one:
    image: openzipkin/zipkin:latest
    ports:
      - "9411:9411"

  otel-collector:
    image: otel/opentelemetry-collector-contrib
    command: [ "--config=/etc/otel-collector-config-demo.yaml", "${OTELCOL_ARGS}" ]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config-demo.yaml
    ports:
      - "1888:1888"   # pprof extension
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "55679:55679" # zpages extension
      - "4317:4317"   # otlp receiver
      - "4318:4318"   # otlp http receiver
    depends_on:
      - jaeger-all-in-one
      - zipkin-all-in-one
      - loki
      - wishlist-app

networks:
  monitoring:
    driver: bridge

volumes:
  db-data:
  pgadmin-data:
  monitoring: